#include <iostream>
#include <algorithm>
#include <string>
#include <sstream>
#include <vector>
#include <fstream>
using namespace std;

int main() {
	int N, result, frstResult = 0, scndResult = 0;
	ifstream fin("bridge.in");
	ofstream fout("bridge.out");
	if (fin.is_open()) {
		fin >> N;
		if (N < 1 || N > 50000) return 1;
		vector<long int> people;
		int personalTime, number = N;
		bool flag = (number % 2 == 0);
		for (long int i = 0; i < N; i++) {
			fin >> personalTime;
			people.push_back(personalTime);
		}
		sort(people.begin(), people.end());
		if (number >= 3) {
			frstResult += people[0] * (number - 2);
			for (int i = 1; i < number; i++)
				frstResult += people[i];
			switch (flag) {
			case true:
				scndResult += people[0] * (number - 2) / 2 + (1 + (number - 2)) * people[1];
				for (int i = number - 1; i > 1; i -= 2)
					scndResult += people[i];
				break;
			case false:
				scndResult += people[0] * ((number - 2) / 2 + 1) + (number - 2) * people[1];
				for (int i = number - 1; i > 1; i -= 2)
					scndResult += people[i];
				break;
			default: return 1;
			}
			if (frstResult < scndResult)
				result = frstResult;
			else
				result = scndResult;
			if (fout.is_open()) {
				fout << result;
				fout.close();
			}
			else return 1;
		}
		else
			if (fout.is_open()) {
				fout << people[number - 1];
				fout.close();
			}
			else return 1;
	}
	else return 1;
	fin.close();
	return 0;
}
